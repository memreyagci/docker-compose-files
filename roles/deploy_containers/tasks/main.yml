---
- name: Create a traefik container
  community.docker.docker_container:
    name: 'traefik'
    image: 'traefik:v2.5'
    recreate: true
    restart_policy: unless-stopped
    published_ports:
      - "443:443"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email={{ ACME_EMAIL }}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

- name: Create a baikal container
  community.docker.docker_container:
    name: 'baikal'
    image: 'ckulka/baikal:latest'
    recreate: true
    restart_policy: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.baikal.rule: "Host(`{{ BAIKAL_DOMAIN }}`)"
      traefik.http.routers.baikal.entrypoints: "websecure"
      traefik.http.routers.baikal.tls.certresolver: "myresolver"
    volumes:
      - "baikal_config:/var/www/baikal/config"
      - "baikal_data:/var/www/baikal/Specific"
      
- name: Create a ghost container
  community.docker.docker_container:
    name: 'ghost'
    image: 'ghost'
    recreate: true
    restart_policy: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.ghost.rule: "Host(`{{ GHOST_DOMAIN }}`)"
      traefik.http.routers.ghost.entrypoints: "websecure"
      traefik.http.routers.ghost.tls.certresolver: "myresolver"
    volumes:
      - "ghost:/var/lib/ghost/content"
    env:
      url: "https://{{ GHOST_DOMAIN }}"

- name: Create a vaultwarden container
  community.docker.docker_container:
    name: 'vaultwarden'
    image: 'vaultwarden/server:latest'
    recreate: true
    restart_policy: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.vaultwarden.rule: "Host(`{{ VAULTWARDEN_DOMAIN }}`)"
      traefik.http.routers.vaultwarden.entrypoints: "websecure"
      traefik.http.routers.vaultwarden.tls.certresolver: "myresolver"
    volumes:
      - "vaultwarden:/data/"
    env:
      ADMIN_TOKEN: "{{VAULTWARDEN_ADMIN_TOKEN}}"

- name: Build an image for Turtl
  community.docker.docker_image:
    build:
      path: turtl
    name: 'turtl/server'
    source: build

- name: Create a Turtl container
  community.docker.docker_container:
    name: 'turtle-server'
    image: 'turtl/server'
    recreate: true
    restart_policy: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.routers.turtl-server.rule: "Host(`{{ TURTL_DOMAIN }}`)"
      traefik.http.routers.turtl-server.entrypoints: "websecure"
      traefik.http.routers.turtl-server.tls.certresolver: "myresolver"
    env:
      TURTL_DB_HOST: postgres-db
      TURTL_DB_PORT: "5432"
      TURTL_DB_DATABASE: turtl
      TURTL_DB_USER: turtl
      TURTL_DB_PASSWORD: "{{ TURTL_DB_PASSWORD }}"
      TURTL_APP_SECURE_HASH_SALT: "{{ TURTL_APP_SECURE_HASH_SALT }}"
      TURTL_APP_API_URL: "{{ TURTL_DOMAIN }}"

- name: Create a PostgreSQL container for Turtl
  community.docker.docker_container:
    name: 'turtle-db'
    image: 'postgres:11-alpine'
    recreate: true
    volumes:
      - "turtl:/var/lib/postgresql/"
    env:
      POSTGRES_PASSWORD: "{{ TURTL_DB_PASSWORD }}"
      POSTGRES_USER: turtl
      POSTGRES_DB: turtl
        # healthcheck:
        #   test: ["CMD-SHELL", "pg_isready -U turtl"]
        #   interval: 10s
        #   timeout: 5s
        #   retries: 5

        #    - name: Create the necessary volumes
        #      community.docker.docker_volume:
        #        name: "{{ item }}"
        #      loop:
        #        - "baikal_config"
        #        - "baikal_data"
        #        - "ghost"
        #        - "letsencrypt"
        #        - "turtl"
        #        - "vaultwarden"
